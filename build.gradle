import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

plugins {
    id 'org.springframework.boot' version '2.4.5'
    id 'com.bmuschko.docker-remote-api' version '6.4.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'scala'
}

ext.scala_version = "2.12.1"

group = 'big-data'
version = '1.0.0'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    implementation "org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.1"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation "org.apache.spark:spark-core_2.12:3.0.1"
    implementation "org.apache.spark:spark-sql_2.12:3.0.1"
    implementation "org.mongodb:mongo-java-driver:3.12.7"
    implementation "org.postgresql:postgresql:42.2.8"
    implementation "org.jsoup:jsoup:1.7.2"

    compile "org.jetbrains:annotations:17.0.0"
    compile "kz.greetgo.util:greetgo.util:0.1.3"
    compile "kz.greetgo:greetgo.scheduling:3.0.3"
    compile "kz.greetgo.conf:greetgo.conf:2.0.0"
    compile "org.liquibase:liquibase-core:3.8.0"

}

test {
    useJUnitPlatform()
}

task createDockerFile(type: Dockerfile) {
    group('docker')
    destFile = file('build/docker/Dockerfile');
    from("openjdk:11.0.5-jre")
    copyFile("web-1.0.0.jar", "app.jar")
    entryPoint("java", "-jar", "/app.jar")
}

task copyJar(type: Copy) {
    group('docker')
    dependsOn bootJar, createDockerFile
    from('build/libs') { include '*.jar' }
    into('build/docker')
}

def imageName = "big-data/$project.name:$project.version"

task createDockerImage(type: DockerBuildImage) {
    group('docker')
    dependsOn copyJar
    inputDir = file('build/docker')
    images = [imageName]
    noCache = true
}

task showImageName() {
    group('docker')
    println imageName
}

